/* This file is automatically generated from "mitsuba.conf" using the script
   "resources/configure.py". Please do not attempt to change it manually,
   as any changes will be overwritten. The main purpose of this file is to
   helper various macros to instantiate multiple variants of Mitsuba. */

#pragma once

#include <mitsuba/core/fwd.h>
#include <enoki/jit.h>
#include <enoki/autodiff.h>

/// List of enabled Mitsuba variants
#define MTS_VARIANTS                                                            \
    "scalar_rgb\n"                                                              \
    "scalar_acoustic\n"                                                         \
    "cuda_acoustic\n"                                                           \
    "cuda_ad_acoustic\n"                                                        \

/// Default variant to be used by the "mitsuba" executable
#define MTS_DEFAULT_VARIANT "scalar_rgb"                                        \

/// Declare that a "struct" template is to be imported and not instantiated
#define MTS_EXTERN_STRUCT_CORE(Name)                                            \
    MTS_EXTERN_CORE template struct Name<float, Color<float, 3>>;               \
    MTS_EXTERN_CORE template struct Name<float, Spectrum<float, 1>>;            \
    MTS_EXTERN_CORE template struct Name<ek::CUDAArray<float>, Spectrum<ek::CUDAArray<float>, 1>>; \
    MTS_EXTERN_CORE template struct Name<ek::DiffArray<ek::CUDAArray<float>>, Spectrum<ek::DiffArray<ek::CUDAArray<float>>, 1>>; \

/// Declare that a "class" template is to be imported and not instantiated
#define MTS_EXTERN_CLASS_CORE(Name)                                             \
    MTS_EXTERN_CORE template class Name<float, Color<float, 3>>;                \
    MTS_EXTERN_CORE template class Name<float, Spectrum<float, 1>>;             \
    MTS_EXTERN_CORE template class Name<ek::CUDAArray<float>, Spectrum<ek::CUDAArray<float>, 1>>; \
    MTS_EXTERN_CORE template class Name<ek::DiffArray<ek::CUDAArray<float>>, Spectrum<ek::DiffArray<ek::CUDAArray<float>>, 1>>; \

/// Declare that a "struct" template is to be imported and not instantiated
#define MTS_EXTERN_STRUCT_RENDER(Name)                                          \
    MTS_EXTERN_RENDER template struct Name<float, Color<float, 3>>;             \
    MTS_EXTERN_RENDER template struct Name<float, Spectrum<float, 1>>;          \
    MTS_EXTERN_RENDER template struct Name<ek::CUDAArray<float>, Spectrum<ek::CUDAArray<float>, 1>>; \
    MTS_EXTERN_RENDER template struct Name<ek::DiffArray<ek::CUDAArray<float>>, Spectrum<ek::DiffArray<ek::CUDAArray<float>>, 1>>; \

/// Declare that a "class" template is to be imported and not instantiated
#define MTS_EXTERN_CLASS_RENDER(Name)                                           \
    MTS_EXTERN_RENDER template class Name<float, Color<float, 3>>;              \
    MTS_EXTERN_RENDER template class Name<float, Spectrum<float, 1>>;           \
    MTS_EXTERN_RENDER template class Name<ek::CUDAArray<float>, Spectrum<ek::CUDAArray<float>, 1>>; \
    MTS_EXTERN_RENDER template class Name<ek::DiffArray<ek::CUDAArray<float>>, Spectrum<ek::DiffArray<ek::CUDAArray<float>>, 1>>; \

/// Explicitly instantiate all variants of a "struct" template
#define MTS_INSTANTIATE_STRUCT(Name)                                            \
    template struct Name<float, Color<float, 3>>;                               \
    template struct Name<float, Spectrum<float, 1>>;                            \
    template struct Name<ek::CUDAArray<float>, Spectrum<ek::CUDAArray<float>, 1>>; \
    template struct Name<ek::DiffArray<ek::CUDAArray<float>>, Spectrum<ek::DiffArray<ek::CUDAArray<float>>, 1>>; \

/// Explicitly instantiate all variants of a "class" template
#define MTS_INSTANTIATE_CLASS(Name)                                             \
    template class Name<float, Color<float, 3>>;                                \
    template class Name<float, Spectrum<float, 1>>;                             \
    template class Name<ek::CUDAArray<float>, Spectrum<ek::CUDAArray<float>, 1>>; \
    template class Name<ek::DiffArray<ek::CUDAArray<float>>, Spectrum<ek::DiffArray<ek::CUDAArray<float>>, 1>>; \

/// Call the variant function "func" for a specific variant "variant"
#define MTS_INVOKE_VARIANT(variant, func, ...)                                  \
    [&]() {                                                                     \
        if (variant == "scalar_rgb")                                            \
            return func<float, Color<float, 3>>(__VA_ARGS__);                   \
        else if (variant == "scalar_acoustic")                                  \
            return func<float, Spectrum<float, 1>>(__VA_ARGS__);                \
        else if (variant == "cuda_acoustic")                                    \
            return func<ek::CUDAArray<float>, Spectrum<ek::CUDAArray<float>, 1>>(__VA_ARGS__); \
        else if (variant == "cuda_ad_acoustic")                                 \
            return func<ek::DiffArray<ek::CUDAArray<float>>, Spectrum<ek::DiffArray<ek::CUDAArray<float>>, 1>>(__VA_ARGS__); \
        else                                                                    \
            Throw("Unsupported variant: \"%s\". Must be one of scalar_rgb, scalar_acoustic, cuda_acoustic, cuda_ad_acoustic!", variant); \
    }()                                                                         \

NAMESPACE_BEGIN(mitsuba)
NAMESPACE_BEGIN(detail)
/// Convert a <Float, Spectrum> type pair into one of the strings in MTS_VARIANT
template <typename Float_, typename Spectrum_> constexpr const char *get_variant() {
    if constexpr (std::is_same_v<Float_, float> &&
                  std::is_same_v<Spectrum_, Color<float, 3>>)
        return "scalar_rgb";
    else if constexpr (std::is_same_v<Float_, float> &&
                       std::is_same_v<Spectrum_, Spectrum<float, 1>>)
        return "scalar_acoustic";
    else if constexpr (std::is_same_v<Float_, ek::CUDAArray<float>> &&
                       std::is_same_v<Spectrum_, Spectrum<ek::CUDAArray<float>, 1>>)
        return "cuda_acoustic";
    else if constexpr (std::is_same_v<Float_, ek::DiffArray<ek::CUDAArray<float>>> &&
                       std::is_same_v<Spectrum_, Spectrum<ek::DiffArray<ek::CUDAArray<float>>, 1>>)
        return "cuda_ad_acoustic";
    else
        return "";
}
NAMESPACE_END(detail)
NAMESPACE_END(mitsuba)
